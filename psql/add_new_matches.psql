/**
 * Table, trigger, and function to track when new name matches between 
 * partners occur. 
 *
**/


/*
CREATE TABLE new_matches (
        uuid varchar(255) NOT NULL REFERENCES users (uuid) ON DELETE CASCADE, 
        partner_uuid varchar(255) NOT NULL REFERENCES users (uuid) ON DELETE CASCADE, 
        name VARCHAR(255) NOT NULL REFERENCES names (name),
        UNIQUE (uuid, partner_uuid, name)
);
*/

DROP TRIGGER IF EXISTS add_new_matches_trigger ON selections;
CREATE TRIGGER add_new_matches_trigger
        AFTER INSERT OR UPDATE ON selections
        FOR EACH ROW
        EXECUTE PROCEDURE add_new_matches();


CREATE OR REPLACE FUNCTION add_new_matches()
        RETURNS TRIGGER AS $add_new_matches$

DECLARE partner varchar(255);
BEGIN
        FOR partner IN SELECT partner_uuid
			FROM partners
			WHERE uuid = NEW.uuid AND confirmed
        LOOP
                IF EXISTS
                     (SELECT 1 FROM selections WHERE uuid = partner
                      AND name = NEW.name AND selected)
                   THEN
                        INSERT INTO new_matches(uuid, partner_uuid, name)
                        VALUES(NEW.uuid, partner, NEW.name)
                        ON CONFLICT DO NOTHING;
			INSERT INTO new_matches(uuid, partner_uuid, name)
			VALUES(partner, NEW.uuid, NEW.name)
			ON CONFLICT DO NOTHING;
                END IF;

        END LOOP;

        RETURN NEW;
END;
$add_new_matches$ LANGUAGE plpgsql;
