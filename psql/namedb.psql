--
-- PostgreSQL database dump
--

-- Dumped from database version 10.10 (Ubuntu 10.10-0ubuntu0.18.04.1)
-- Dumped by pg_dump version 10.10 (Ubuntu 10.10-0ubuntu0.18.04.1)

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

--
-- Name: plpgsql; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS plpgsql WITH SCHEMA pg_catalog;


--
-- Name: EXTENSION plpgsql; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION plpgsql IS 'PL/pgSQL procedural language';


--
-- Name: add_new_matches(); Type: FUNCTION; Schema: public; Owner: namebot
--

CREATE FUNCTION public.add_new_matches() RETURNS trigger
    LANGUAGE plpgsql
    AS $$

DECLARE partner varchar(255);
BEGIN
        FOR partner IN SELECT partner_uuid
			FROM partners
			WHERE uuid = NEW.uuid AND confirmed
        LOOP
                IF EXISTS
                     (SELECT 1 FROM selections WHERE uuid = partner
                      AND name = NEW.name AND selected)
                   THEN
                        INSERT INTO new_matches(uuid, partner_uuid, name)
                        VALUES(NEW.uuid, partner, NEW.name)
                        ON CONFLICT DO NOTHING;
			INSERT INTO new_matches(uuid, partner_uuid, name)
			VALUES(partner, NEW.uuid, NEW.name)
			ON CONFLICT DO NOTHING;
                END IF;

        END LOOP;

        RETURN NEW;
END;
$$;


ALTER FUNCTION public.add_new_matches() OWNER TO namebot;

--
-- Name: get_partner_uuids(character varying); Type: FUNCTION; Schema: public; Owner: namebot
--

CREATE FUNCTION public.get_partner_uuids(input_uuid character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$
DECLARE partner_uuids VARCHAR(255);
BEGIN 
	SELECT partner_uuid into partner_uuids 
	FROM partners as p
	WHERE p.uuid = input_uuid;
	RETURN partner_uuids;
END;
$$;


ALTER FUNCTION public.get_partner_uuids(input_uuid character varying) OWNER TO namebot;

--
-- Name: partner_pair_insert(); Type: FUNCTION; Schema: public; Owner: namebot
--

CREATE FUNCTION public.partner_pair_insert() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
        BEGIN
                INSERT INTO partners(uuid,partner_uuid,pair_date)
                VALUES (new.partner_uuid, new.uuid, new.pair_date);

                RETURN new;
        END;
$$;


ALTER FUNCTION public.partner_pair_insert() OWNER TO namebot;

SET default_tablespace = '';

SET default_with_oids = false;

--
-- Name: name_preferences; Type: TABLE; Schema: public; Owner: namebot
--

CREATE TABLE public.name_preferences (
    uuid character varying(255) NOT NULL,
    gender character varying(255),
    first_letter character varying(255),
    last_letter character varying(255),
    popularity character varying(255)
);


ALTER TABLE public.name_preferences OWNER TO namebot;

--
-- Name: names; Type: TABLE; Schema: public; Owner: namebot
--

CREATE TABLE public.names (
    name text NOT NULL,
    ratio_mf_alltime real,
    rank_m_alltime real,
    rank_f_alltime real,
    ratio_mf_2010 real,
    rank_m_2010 real,
    rank_f_2010 real,
    m boolean,
    f boolean,
    mf_2010 boolean,
    neutral20 boolean,
    neutral40 boolean,
    first_letter character varying(1),
    last_letter character varying(1)
);


ALTER TABLE public.names OWNER TO namebot;

--
-- Name: new_matches; Type: TABLE; Schema: public; Owner: namebot
--

CREATE TABLE public.new_matches (
    uuid character varying(255) NOT NULL,
    partner_uuid character varying(255) NOT NULL,
    name character varying(255) NOT NULL
);


ALTER TABLE public.new_matches OWNER TO namebot;

--
-- Name: partners; Type: TABLE; Schema: public; Owner: namebot
--

CREATE TABLE public.partners (
    uuid character varying(255) NOT NULL,
    partner_uuid character varying(255) NOT NULL,
    proposer boolean NOT NULL,
    pair_propose_date timestamp without time zone NOT NULL,
    pair_confirm_date timestamp without time zone,
    confirmed boolean DEFAULT false NOT NULL
);


ALTER TABLE public.partners OWNER TO namebot;

--
-- Name: password_recovery; Type: TABLE; Schema: public; Owner: namebot
--

CREATE TABLE public.password_recovery (
    uuid character varying(255) NOT NULL,
    selector character varying(16) NOT NULL,
    token character varying(64) NOT NULL,
    expires timestamp without time zone NOT NULL
);


ALTER TABLE public.password_recovery OWNER TO namebot;

--
-- Name: selections; Type: TABLE; Schema: public; Owner: namebot
--

CREATE TABLE public.selections (
    uuid character varying(255) NOT NULL,
    name text NOT NULL,
    date_selected timestamp without time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,
    selected boolean NOT NULL
);


ALTER TABLE public.selections OWNER TO namebot;

--
-- Name: users; Type: TABLE; Schema: public; Owner: namebot
--

CREATE TABLE public.users (
    uuid character varying(255) NOT NULL,
    email character varying(255) NOT NULL,
    create_date timestamp without time zone NOT NULL,
    last_login timestamp without time zone NOT NULL,
    password character varying(255) NOT NULL
);


ALTER TABLE public.users OWNER TO namebot;

--
-- Name: name_preferences name_preferences_pkey; Type: CONSTRAINT; Schema: public; Owner: namebot
--

ALTER TABLE ONLY public.name_preferences
    ADD CONSTRAINT name_preferences_pkey PRIMARY KEY (uuid);


--
-- Name: names names_pkey; Type: CONSTRAINT; Schema: public; Owner: namebot
--

ALTER TABLE ONLY public.names
    ADD CONSTRAINT names_pkey PRIMARY KEY (name);


--
-- Name: new_matches new_matches_uuid_partner_uuid_name_key; Type: CONSTRAINT; Schema: public; Owner: namebot
--

ALTER TABLE ONLY public.new_matches
    ADD CONSTRAINT new_matches_uuid_partner_uuid_name_key UNIQUE (uuid, partner_uuid, name);


--
-- Name: partners partners_uuid_partner_uuid_proposer_key; Type: CONSTRAINT; Schema: public; Owner: namebot
--

ALTER TABLE ONLY public.partners
    ADD CONSTRAINT partners_uuid_partner_uuid_proposer_key UNIQUE (uuid, partner_uuid, proposer);


--
-- Name: password_recovery password_recovery_pkey; Type: CONSTRAINT; Schema: public; Owner: namebot
--

ALTER TABLE ONLY public.password_recovery
    ADD CONSTRAINT password_recovery_pkey PRIMARY KEY (uuid);


--
-- Name: selections selections_uuid_name_key; Type: CONSTRAINT; Schema: public; Owner: namebot
--

ALTER TABLE ONLY public.selections
    ADD CONSTRAINT selections_uuid_name_key UNIQUE (uuid, name);


--
-- Name: users unique_email; Type: CONSTRAINT; Schema: public; Owner: namebot
--

ALTER TABLE ONLY public.users
    ADD CONSTRAINT unique_email UNIQUE (email);


--
-- Name: users users_pkey; Type: CONSTRAINT; Schema: public; Owner: namebot
--

ALTER TABLE ONLY public.users
    ADD CONSTRAINT users_pkey PRIMARY KEY (uuid);


--
-- Name: selections add_new_matches_trigger; Type: TRIGGER; Schema: public; Owner: namebot
--

CREATE TRIGGER add_new_matches_trigger AFTER INSERT OR UPDATE ON public.selections FOR EACH ROW EXECUTE PROCEDURE public.add_new_matches();


--
-- Name: name_preferences name_preferences_uuid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: namebot
--

ALTER TABLE ONLY public.name_preferences
    ADD CONSTRAINT name_preferences_uuid_fkey FOREIGN KEY (uuid) REFERENCES public.users(uuid) ON DELETE CASCADE;


--
-- Name: new_matches new_matches_name_fkey; Type: FK CONSTRAINT; Schema: public; Owner: namebot
--

ALTER TABLE ONLY public.new_matches
    ADD CONSTRAINT new_matches_name_fkey FOREIGN KEY (name) REFERENCES public.names(name);


--
-- Name: new_matches new_matches_partner_uuid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: namebot
--

ALTER TABLE ONLY public.new_matches
    ADD CONSTRAINT new_matches_partner_uuid_fkey FOREIGN KEY (partner_uuid) REFERENCES public.users(uuid) ON DELETE CASCADE;


--
-- Name: new_matches new_matches_uuid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: namebot
--

ALTER TABLE ONLY public.new_matches
    ADD CONSTRAINT new_matches_uuid_fkey FOREIGN KEY (uuid) REFERENCES public.users(uuid) ON DELETE CASCADE;


--
-- Name: partners partners_partner_uuid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: namebot
--

ALTER TABLE ONLY public.partners
    ADD CONSTRAINT partners_partner_uuid_fkey FOREIGN KEY (partner_uuid) REFERENCES public.users(uuid) ON DELETE CASCADE;


--
-- Name: partners partners_uuid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: namebot
--

ALTER TABLE ONLY public.partners
    ADD CONSTRAINT partners_uuid_fkey FOREIGN KEY (uuid) REFERENCES public.users(uuid) ON DELETE CASCADE;


--
-- Name: password_recovery password_recovery_uuid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: namebot
--

ALTER TABLE ONLY public.password_recovery
    ADD CONSTRAINT password_recovery_uuid_fkey FOREIGN KEY (uuid) REFERENCES public.users(uuid) ON DELETE CASCADE;


--
-- Name: selections selections_name_fkey; Type: FK CONSTRAINT; Schema: public; Owner: namebot
--

ALTER TABLE ONLY public.selections
    ADD CONSTRAINT selections_name_fkey FOREIGN KEY (name) REFERENCES public.names(name) ON DELETE RESTRICT;


--
-- Name: selections selections_uuid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: namebot
--

ALTER TABLE ONLY public.selections
    ADD CONSTRAINT selections_uuid_fkey FOREIGN KEY (uuid) REFERENCES public.users(uuid) ON DELETE CASCADE;


--
-- PostgreSQL database dump complete
--

